{"ast":null,"code":"var _jsxFileName = \"/Users/ltummala/Documents/other workspace/QUIZ App/redux-quiz/src/questions/questions.js\";\nimport React from 'react';\nimport './questions.css';\nimport { NotFound } from '../not-found/noRouteFound';\nimport { connect } from 'react-redux';\nimport { getQuestions } from '../redux/selectors';\nimport { updateResultArray } from \"../redux/actions/answer-action\";\nimport PropTypes from 'prop-types';\n\nclass Questions extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = () => {\n      let selectedElement = document.querySelector('input[name = choices]:checked');\n      this.setState({\n        disableSubmit: !selectedElement\n      });\n    };\n\n    this.handleClick = correctAnswer => {\n      // check if correct\n      let selectedElement = document.querySelector('input[name = choices]:checked'); // if (!selectedElement) {\n      //   alert('Please select something');\n      //   return;\n      // }\n\n      let id = this.props.match.params.id;\n      this.props.updateResultArray(id, correctAnswer === selectedElement.value); // move to next question\n\n      if (parseInt(id) >= this.props.questions.length - 1) {\n        this.props.history.push('/result');\n      } else {\n        this.props.history.push(\"/questions/\".concat(parseInt(id) + 1));\n      }\n\n      this.setState({\n        disableSubmit: true\n      }); // selectedElement.checked = false;\n    };\n\n    this.state = {\n      disableSubmit: true\n    };\n  }\n\n  render() {\n    const id = this.props.match.params.id;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, parseInt(id) < this.props.questions.length ? React.createElement(\"div\", {\n      id: \"quiz\",\n      key: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      id: \"question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, this.props.questions[id].question), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"choices\",\n      onChange: this.handleChange,\n      value: \"A\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      id: \"choiceA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, this.props.questions[id].choiceA)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"choices\",\n      onChange: this.handleChange,\n      value: \"B\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      id: \"choiceB\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, this.props.questions[id].choiceB)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"choices\",\n      onChange: this.handleChange,\n      value: \"C\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      id: \"choiceC\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, this.props.questions[id].choiceC)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"choices\",\n      onChange: this.handleChange,\n      value: \"D\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      id: \"choiceD\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, this.props.questions[id].choiceD)), React.createElement(\"button\", {\n      id: \"submit\",\n      disabled: this.state.disableSubmit,\n      onClick: () => this.handleClick(this.props.questions[id].correct),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(\"h3\", {\n      id: \"quizStatus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Question \", parseInt(id) + 1, \" of \", this.props.questions.length)) : React.createElement(NotFound, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }));\n  }\n\n}\n\nQuestions.propTypes = {\n  updateResultArray: PropTypes.func.isRequired,\n  questions: (props, propName, componentName) => {\n    if (props[propName].length <= 0) {\n      return new Error(\"\".concat(componentName, \" validation failed.\"));\n    }\n  },\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired\n    })\n  })\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const questions = getQuestions(state);\n  return {\n    questions\n  };\n};\n\nconst mapDispatchToProps = {\n  updateResultArray\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","map":{"version":3,"sources":["/Users/ltummala/Documents/other workspace/QUIZ App/redux-quiz/src/questions/questions.js"],"names":["React","NotFound","connect","getQuestions","updateResultArray","PropTypes","Questions","Component","constructor","props","handleChange","selectedElement","document","querySelector","setState","disableSubmit","handleClick","correctAnswer","id","match","params","value","parseInt","questions","length","history","push","state","render","question","choiceA","choiceB","choiceC","choiceD","correct","propTypes","func","isRequired","propName","componentName","Error","shape","string","mapStateToProps","ownProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './questions.css';\nimport { NotFound } from '../not-found/noRouteFound';\nimport { connect } from 'react-redux';\nimport {getQuestions} from '../redux/selectors';\nimport { updateResultArray } from \"../redux/actions/answer-action\";\nimport PropTypes from 'prop-types';\n\nclass Questions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      disableSubmit: true\n    };\n  }\n  handleChange = () => {\n    let selectedElement = document.querySelector('input[name = choices]:checked');\n    this.setState({disableSubmit: !selectedElement});\n  }\n  handleClick = (correctAnswer) => {\n    // check if correct\n    let selectedElement = document.querySelector('input[name = choices]:checked');\n    // if (!selectedElement) {\n    //   alert('Please select something');\n    //   return;\n    // }\n\n    let id = this.props.match.params.id;\n    this.props.updateResultArray(id, correctAnswer === selectedElement.value);\n\n    // move to next question\n    if (parseInt(id) >= this.props.questions.length - 1) {\n      this.props.history.push('/result');\n    } else {\n      this.props.history.push(`/questions/${parseInt(id)+1}`);\n    }\n    this.setState({disableSubmit: true});\n    // selectedElement.checked = false;\n  }\n\n  render() {\n    const id = this.props.match.params.id;\n    return (\n      <div>\n      {parseInt(id) < this.props.questions.length ?\n      (<div id=\"quiz\" key={id}>\n          <h2 id=\"question\">{this.props.questions[id].question}</h2>\n          <div><input type=\"radio\" name=\"choices\" onChange={this.handleChange} value=\"A\" /><span id=\"choiceA\">{this.props.questions[id].choiceA}</span></div>\n          <div><input type=\"radio\" name=\"choices\" onChange={this.handleChange} value=\"B\" /><span id=\"choiceB\">{this.props.questions[id].choiceB}</span></div>\n          <div><input type=\"radio\" name=\"choices\" onChange={this.handleChange} value=\"C\" /><span id=\"choiceC\">{this.props.questions[id].choiceC}</span></div>\n          <div><input type=\"radio\" name=\"choices\" onChange={this.handleChange} value=\"D\" /><span id=\"choiceD\">{this.props.questions[id].choiceD}</span></div>\n          <button id=\"submit\" disabled={this.state.disableSubmit} onClick={() => this.handleClick(this.props.questions[id].correct)}>Submit</button>\n          <h3 id=\"quizStatus\">Question {parseInt(id)+1} of {this.props.questions.length}</h3>\n     </div>) : <NotFound />}\n   </div>\n   );\n  }\n}\n\nQuestions.propTypes = {\n  updateResultArray: PropTypes.func.isRequired,\n  questions: (props, propName, componentName) => {\n    if (props[propName].length <= 0 ) {\n      return new Error(`${componentName} validation failed.`);\n    }\n  }, \n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired\n    })\n  })\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const questions = getQuestions(state);\n  return { questions };\n};\n\nconst mapDispatchToProps = {\n  updateResultArray\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n"]},"metadata":{},"sourceType":"module"}